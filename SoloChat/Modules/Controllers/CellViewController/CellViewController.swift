//
//  CellViewController.swift
//  SoloChat
//
//  Created by –î–∞–Ω–∏–∏–ª –ù–∞–∑–∞—Ä–æ–≤ on 09.06.2023.
//

import UIKit

/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ—è–≤–ª—è—é—â–∏–π—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —è—á–µ–π–∫—É
class CellViewController: UIViewController {
	
	private let cellID: Int
	
	private let message: String
	
	private let image: UIImageView = {
		let image = UIImageView(image: UIImage(systemName: "faceid"))
		image.tintColor = .black
		image.clipsToBounds = true
		image.contentMode = .scaleAspectFill
		image.layer.cornerRadius = 30
		image.translatesAutoresizingMaskIntoConstraints = false
		return image
	}()
	
	private lazy var messageLabel: UILabel = {
		let label = UILabel()
		label.text = message
		label.numberOfLines = 0
		label.textColor = .black
		label.font = label.font.withSize(30)
		label.adjustsFontSizeToFitWidth = true
		label.translatesAutoresizingMaskIntoConstraints = false
		return label
	}()
	
	let timeLabel: UILabel = {
		let label = UILabel()
		label.text = "TIME: 12:34"
		label.textColor = .black
		label.tintColor = .black
		label.font = label.font.withSize(35)
		label.translatesAutoresizingMaskIntoConstraints = false
		return label
	}()
	
	init(cellID: Int, message: String) {
		self.cellID = cellID
		self.message = message
		super.init(nibName: nil, bundle: nil)
	}
	
	override func viewDidLoad() {
		super.viewDidLoad()
		view.backgroundColor = .white
		setupBinding()
	}
	
	private func setupBinding() {
		navigationController?.navigationBar.isHidden = false

		navigationItem.rightBarButtonItem = UIBarButtonItem(title: "Delete",
															style: .plain,
															target: self,
															action: #selector(deleteMessageCell))
		navigationItem.rightBarButtonItem?.tintColor = .red
		
		/// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º–µ
		let lightMode = UserDefaults.standard.bool(forKey: Constants.switcher.rawValue)
		navigationController?.navigationBar.tintColor = lightMode ? .white : .black
		view.backgroundColor = lightMode ? .black : .white
		messageLabel.textColor = lightMode ? .white : .black
		timeLabel.textColor = lightMode ? .white : .black
		
		/// –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
		/// –ú–æ–∂–Ω–æ –ø—Ä–∏–∫–æ–ª–æ—Ç—å—Å—è –∏ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
		/// –ù–æ —è –Ω–µ —Ö–æ—á—É
		let formatter = DateFormatter()
		formatter.timeStyle = .short
		let time = formatter.string(from: Date.now)
		timeLabel.text = time
		
		addSubviews()
		setupConstraints()
		loadImage()
	}
	
	private func addSubviews() {
		view.addSubview(image)
		view.addSubview(messageLabel)
		view.addSubview(timeLabel)
	}
	
	private func setupConstraints() {
		NSLayoutConstraint.activate([
			image.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
			image.centerXAnchor.constraint(equalTo: view.centerXAnchor),
			image.heightAnchor.constraint(equalToConstant: 300),
			image.widthAnchor.constraint(equalToConstant: 300)
		])
		
		NSLayoutConstraint.activate([
			timeLabel.topAnchor.constraint(equalTo: image.bottomAnchor, constant: 25),
			timeLabel.leadingAnchor.constraint(equalTo: image.leadingAnchor),
			timeLabel.heightAnchor.constraint(equalToConstant: 50)
		])
		
		NSLayoutConstraint.activate([
			messageLabel.topAnchor.constraint(equalTo: timeLabel.bottomAnchor, constant: 20),
			messageLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 30),
			messageLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -30),
			messageLabel.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -30)
		])
	}
	
	/// –ú–æ–∂–Ω–æ –ø—Ä–∏–∫–æ–ª–æ—Ç—å—Å—è –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ init —Ç–∞–∫–∂–µ –∏–º–µ–π–¥–∂, –Ω–æ —ç—Ç–æ –≤ —Å–ª—É—á–∞–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫ üíÄ
	private func loadImage() {
		NetworkManager.loadImageFromURL { [weak self] result in
			switch result {
			case .success(let image):
				/// –ù—É–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∞–ª—å—Ñ—É –≤ 0 –≤ —Ç–æ–º —Å–ª—É—á–∞–µ —á—Ç–æ –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å —Å—Ç–æ–∫–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
				self?.image.alpha = 0
				UIView.animate(withDuration: 1) {
					self?.image.alpha = 1
					self?.image.image = image
				}
			case .failure(_):
				break;
			}
		}
	}
	
	@objc private func deleteMessageCell() {
		debugPrint("DELETE CELL")
		/// –ü–µ—Ä–µ–¥–∞—á–∞ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ MainViewController
		let userInfo = [Constants.deleteCell.rawValue: cellID]
		debugPrint(userInfo)
		NotificationCenter.default.post(name: .deleteCell, object: nil, userInfo: userInfo)
		navigationController?.popViewController(animated: true)
	}
	
	required init?(coder: NSCoder) {
		fatalError("init(coder:) has not been implemented")
	}
}
